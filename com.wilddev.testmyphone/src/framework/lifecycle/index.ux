<template>
    <div class="container">
        <div class="page-title-wrap">
            <text class="page-title">{{componentName}}</text>
        </div>
        <div class="tutorial-page">
            <text>{{$t('message.framework.lifecycle.lifecycleName')}}</text>
            <div class="tutorial-panel">
                <text for="lcList">{{$idx}}:{{$item}}</text>
            </div>
        </div>
    </div>
</template>

<style>
    @import "../../common/css/common.css";

    .tutorial-page {
        flex-direction: column;
        padding: 20px 10px;
    }

    a {
        text-decoration: underline;
        text-align: center;
    }

    text {
        font-size: 35px;
        font-weight: bold;
        margin-left: 60px;
    }

    .tutorial-panel {
        margin-top: 30px;
        flex-direction: column;
        flex-grow: 1;
    }
</style>

<script>
    export default {
        data: {
            componentName: 'lifecycle',
            // Lifecycle's text list
            lcList: []
        },
        onInit() {
            this.$page.setTitleBar({ text: 'lifecycle' })

            this.lcList.push('onInit')

            console.info(this.$t('message.framework.lifecycle.emit')+`onInit`)
            console.info(this.$t('message.framework.lifecycle.getLcList')+`${this.lcList}`)   // Execute: Get the lcList attribute of data: onInit
        },
        onReady() {
            this.lcList.push('onReady')

            console.info(this.$t('message.framework.lifecycle.emit')+`onReady`)
            console.info(this.$t('message.framework.lifecycle.getTemplateNode')+`${this.$rootElement()}`)   // Execution: Get the template node:<div attr={} style={"flexDirection":"column"}>...</div>
        },
        onShow() {
            this.lcList.push('onShow')

            console.info(this.$t('message.framework.lifecycle.emit')+`onShow`)
            console.info(this.$t('message.framework.lifecycle.getPageVisible')+`${this.$visible}`)  // true
        },
        onHide() {
            this.lcList.push('onHide')

            console.info(this.$t('message.framework.lifecycle.emit')+`onHide`)
            console.info(this.$t('message.framework.lifecycle.getPageVisible')+`${this.$visible}`)  // false
        },
        onDestroy() {
            console.info(this.$t('message.framework.lifecycle.emit')+`onDestroy`)
            console.info(this.$t('message.framework.lifecycle.pageDestroy')+`${this.$valid}${this.$t('message.framework.lifecycle.cancelWatch')}geolocation.susubscribe()`)    // true，即将销毁
            setTimeout(function () {
                console.info(this.$t('message.framework.lifecycle.pageHasDestroyed'))                                        // The page has been destroyed and will not be executed
            }.bind(this), 0)
        },
        onBackPress() {
            console.info(this.$t('message.framework.lifecycle.emit')+`onBackPress`)

            // true：Indicates that you are handling it; otherwise it returns to the previous page by default.
            // return true
        },
        onMenuPress() {
            this.lcList.push('onMenuPress')

            console.info(`${this.$t('message.framework.lifecycle.emit')}onMenuPress`)
        }
    }
</script>