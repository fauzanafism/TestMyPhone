<template>
    <div class="container">
        <!-- The attribute refreshing is used to identify the loading status of the refresh component. -->
        <refresh class="refresh" onrefresh="refresh" refreshing="{{isRefreshing}}" offset=800px>
            <div class="page-title-wrap">
                <text class="page-title ">{{componentName}}</text>
            </div>
            <div class="item-container">
                <input class="btn" type="button" value="{{$t('message.component.refreshWithList.stopRefresh')}}" onclick="stopRefresh" />
            </div>
            <!-- List -->
            <list class="list" onscrollbottom="scrollbottom" onscrolltop="scrolltop" onscroll="scroll" id="list"
                scrollpage="{{scrollPage}}">
                <!-- List element, when the attribute type value is the same, you need to ensure that the rendered view layout is also the same, use show instead of if, make sure the layout view is unchanged -->
                <list-item type="listItem" class="item item-color" for="{{listData}}">
                    <text class="txt">{{$item}}--{{$idx}}</text>
                </list-item>
                <!-- loading more -->
                <list-item type="loadMore" class="load-more" if="{{loadMore}}">
                    <progress type="circular"></progress>
                    <text>{{$t('message.component.refreshWithList.loadMore')}}</text>
                </list-item>
            </list>
        </refresh>
    </div>
</template>

<style>
    @import "../../../common/css/common.css";

    .refresh {
        background-color: #ffffff;
        progress-color: #0faeff;
        flex-direction: column;
        flex: 1;
    }

    .item-container {
        margin-bottom: 50px;
        margin-right: 60px;
        margin-left: 60px;
        flex-direction: column;
    }

    .list {
        flex-direction: column;
        flex: 1;
        padding-left: 60px;
        padding-right: 60px;
        columns: 4;
        border-color: #ff0000;
        border-width: 5px;
    }

    .item {
        height: 150px;
        align-items: flex-start;
        margin-bottom: 15px;
        border-color: #9400d3;
        border-width: 5px;
        margin-right: 20px;
    }

    .load-more {
        justify-content: center;
        align-items: center;
        height: 100px;
        border-color: #bbbbbb;
        border-bottom-width: 1px;
    }

    .item-color {
        background-color: #f76160;
    }
</style>

<script>
    import prompt from '@system.prompt'

    export default {
        data: {
            componentName: 'refresh',
            isRefreshing: false,
            loadMore: true,
            listAdd: ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'],
            listData: [],
            scrollPage: false,
            showListBtn: true,
            listClass: 'selected',
            arrayClass: '',
        },
        onInit() {
            this.$page.setTitleBar({ text: 'refresh' })
            // Initialize list data
            this.listData = [].concat(this.listAdd);
        },
        refresh: function (e) {
            prompt.showToast({
                message: this.$t('message.component.refreshWithList.refreshing')
            })
            var that = this;
            // Update refresh status (the value of the property refreshing changed from false to true will trigger the status update of the refresh component, and vice versa)
            that.isRefreshing = e.refreshing;
            setTimeout(function () {
                // Turn off refresh status
                that.isRefreshing = false;
                prompt.showToast({
                    message: that.$t('message.component.refreshWithList.refreshComplete')
                })
            }, 3000)
        },
        stopRefresh: function () {
            this.isRefreshing = false;
        },
        scrollbottom: function () {
            prompt.showToast({
                message: this.$t('message.component.refreshWithList.isBottom')
            })
            // Load next page
            var that = this;
            var renderData = [].concat(that.listData, that.listAdd);
            setTimeout(function () {
                that.listData = renderData;
            }, 1000)
        },
        scrolltop: function () {
            prompt.showToast({
                message: this.$t('message.component.refreshWithList.isTop')
            })
        },
        //Monitoring during sliding
        scroll: function (e) {
            let msg = this.$t('message.component.refreshWithList.sliding')+".scrollX:" + e.scrollX
                + " .scrollY:" + e.scrollY
                + " .scrollState:" + e.scrollState;
            console.info(msg);
        }
    }
</script>